diff --git a/src/src/node_main.cc b/src/src/node_main.cc
index f66099a55..a18849bf5 100644
--- a/src/src/node_main.cc
+++ b/src/src/node_main.cc
@@ -22,6 +22,93 @@
 #include "node.h"
 #include <cstdio>
 
+#if 1
+
+#include "../oda/jscript.h"
+
+#include <atomic>
+#include <condition_variable>
+#include <cstdlib>
+#include <filesystem>
+#include <iostream>
+#include <mutex>
+#include <string>
+
+static std::atomic_bool script_done{false};
+static bool is_script_done() {
+  return script_done;
+}
+static std::mutex script_mutex;
+static std::condition_variable script_cv;
+static void script_cb(const v8::FunctionCallbackInfo<v8::Value>&) {
+  std::cout << "Call script_cb(const v8::FunctionCallbackInfo<v8::Value>&)"
+            << std::endl;
+  script_done = true;
+  script_cv.notify_all();
+}
+
+int main(int argc, char** argv) {
+  const std::string cwd = std::filesystem::current_path().string();
+  std::cout << "Current directory: " << cwd << std::endl;
+
+  const std::string origin = "http://127.0.0.1:8080";
+  const std::string externalOrigin = "http://127.0.0.1:8080";
+  const std::string executeFile = argv[0];
+  const std::string coreFolder = cwd;
+  const std::string nodeFolder = coreFolder + "/node_modules";
+
+  node::jscript::Initialize(
+      origin, externalOrigin, executeFile, coreFolder, nodeFolder);
+  std::cout << "node::jscript::Initialize() done" << std::endl;
+
+  node::jscript::result_t res;
+  node::jscript::JSInstance* instance{nullptr};
+  res = node::jscript::CreateInstance(&instance);
+  if (res != node::jscript::JS_SUCCESS || !instance) {
+    std::cout << "Failed instance create" << std::endl;
+    std::exit(EXIT_FAILURE);
+  }
+  std::cout << "Instance created" << std::endl;
+
+  const std::string script = ""
+                             "console.log('Im`a instance!')\n"
+                             "scriptDone();\n"
+                             "";
+
+  node::jscript::JSCallbackInfo resolveInfo;
+  resolveInfo.name = "scriptDone";
+  resolveInfo.function = script_cb;
+
+  const std::vector<node::jscript::JSCallbackInfo> callbacks{
+      std::move(resolveInfo)};
+
+  res = node::jscript::RunScriptText(instance, script, callbacks);
+  if (res != node::jscript::JS_SUCCESS) {
+    std::cout << "Failed running script" << std::endl;
+    std::exit(EXIT_FAILURE);
+  }
+
+  std::cout << "Script running, waiting..." << std::endl;
+  std::unique_lock<std::mutex> script_lock{script_mutex};
+  script_cv.wait(script_lock, [] { return is_script_done(); });
+
+  std::cout << "Script done" << std::endl;
+
+  res = node::jscript::StopInstance(instance);
+  if (res != node::jscript::JS_SUCCESS) {
+    std::cout << "Failed instance stop" << std::endl;
+    std::exit(EXIT_FAILURE);
+  }
+  std::cout << "Instance stopped" << std::endl;
+
+  node::jscript::Uninitilize();
+  std::cout << "node::jscript::Uninitilize() done" << std::endl;
+
+  return EXIT_SUCCESS;
+}
+
+#else
+
 #ifdef _WIN32
 #include <windows.h>
 #include <VersionHelpers.h>
@@ -97,3 +184,5 @@ int main(int argc, char* argv[]) {
   return node::Start(argc, argv);
 }
 #endif
+
+#endif
diff --git a/src/web/core/odant.js b/src/web/core/odant.js
new file mode 100644
index 000000000..45912c199
--- /dev/null
+++ b/src/web/core/odant.js
@@ -0,0 +1,10 @@
+console.log("I`m fake Odant framework!");
+
+
+var ret = new Promise((resolve, reject) => {
+    setTimeout(() => {
+        resolve(42);
+    }, 100);
+});
+
+module.exports = ret;

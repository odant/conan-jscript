diff --git a/src/common.gypi b/src/common.gypi
index 338ed2cbbb9..0a48c05da54 100644
--- a/src/common.gypi
+++ b/src/common.gypi
@@ -279,19 +279,11 @@
         'conditions': [
           ['target_arch=="ia32"', {
             'TargetMachine' : 1, # /MACHINE:X86
-            'target_conditions': [
-              ['_type=="executable"', {
-                'AdditionalOptions': [ '/SubSystem:Console,"5.01"' ],
-              }],
-            ],
+            'AdditionalOptions': [ '/SubSystem:Console,"6.01"' ],
           }],
           ['target_arch=="x64"', {
             'TargetMachine' : 17, # /MACHINE:AMD64
-            'target_conditions': [
-              ['_type=="executable"', {
-                'AdditionalOptions': [ '/SubSystem:Console,"5.02"' ],
-              }],
-            ],
+            'AdditionalOptions': [ '/SubSystem:Console,"6.01"' ],
           }],
           ['target_arch=="arm64"', {
             'TargetMachine' : 0, # /MACHINE:ARM64 is inferred from the input files.
diff --git a/src/configure.py b/src/configure.py
index 8ae56fdeff2..f1302960060 100644
--- a/src/configure.py
+++ b/src/configure.py
@@ -600,6 +600,12 @@ parser.add_option('-C',
     dest='compile_commands_json',
     help=optparse.SUPPRESS_HELP)
 
+# Custom output name
+parser.add_option('--node_core_target_name',
+    action='store',
+    dest='node_core_target_name',
+    help='custom output name')
+
 (options, args) = parser.parse_args()
 
 # Expand ~ in the install prefix now, it gets written to multiple files.
@@ -1141,6 +1147,9 @@ def configure_node(o):
   o['variables']['node_experimental_http_parser'] = \
       b(options.experimental_http_parser)
 
+  o['variables']['node_core_target_name'] = options.node_core_target_name
+  o['variables']['node_lib_target_name'] = options.node_core_target_name + '_lib'
+
 def configure_library(lib, output):
   shared_lib = 'shared_' + lib
   output['variables']['node_' + shared_lib] = b(getattr(options, shared_lib))
diff --git a/src/src/node.cc b/src/src/node.cc
index 9494cc11078..bc650793fc2 100644
--- a/src/src/node.cc
+++ b/src/src/node.cc
@@ -998,3 +998,5 @@ void Initialize() {}
 
 NODE_MODULE_CONTEXT_AWARE_INTERNAL(inspector, Initialize)
 #endif  // !HAVE_INSPECTOR
+
+#include <../oda/jscript-inl.h>
diff --git a/src/src/node_errors.cc b/src/src/node_errors.cc
index 1923cb6a22f..e06b88c2ba5 100644
--- a/src/src/node_errors.cc
+++ b/src/src/node_errors.cc
@@ -265,9 +265,10 @@ void ReportException(Environment* env, const v8::TryCatch& try_catch) {
   ReportException(env, try_catch.Exception(), try_catch.Message());
 }
 
-void PrintErrorString(const char* format, ...) {
+struct OriginalPrintErrorString {};
+void PrintErrorString(OriginalPrintErrorString, const char* format, va_list _ap) {
   va_list ap;
-  va_start(ap, format);
+  va_copy(ap, _ap);
 #ifdef _WIN32
   HANDLE stderr_handle = GetStdHandle(STD_ERROR_HANDLE);
 
@@ -299,6 +300,29 @@ void PrintErrorString(const char* format, ...) {
   va_end(ap);
 }
 
+std::function<void(const std::string&)> redirectPrintErrorString;
+void SetRedirectPrintErrorString(std::function<void(const std::string&)> redirectFunction){
+  redirectPrintErrorString = std::move(redirectFunction);
+}
+
+void PrintErrorString(const char* format, ...) {
+  va_list ap;
+  va_start(ap, format);
+
+  if (redirectPrintErrorString) {
+    const int length = ::vsnprintf(nullptr, 0, format, ap);
+    if (length > 0) {
+        std::string data(length-1, '\0');
+        ::vsnprintf(&data[0], length, format, ap);
+        redirectPrintErrorString(data);
+    }
+  } else {
+    PrintErrorString(OriginalPrintErrorString{}, format, ap);
+  }
+
+  va_end(ap);
+}
+
 [[noreturn]] void FatalError(const char* location, const char* message) {
   OnFatalError(location, message);
   // to suppress compiler warning
diff --git a/src/src/node_errors.h b/src/src/node_errors.h
index 2e9fd761a83..a2b015ce94c 100644
--- a/src/src/node_errors.h
+++ b/src/src/node_errors.h
@@ -24,6 +24,7 @@ void AppendExceptionLine(Environment* env,
 void OnFatalError(const char* location, const char* message);
 
 void PrintErrorString(const char* format, ...);
+void SetRedirectPrintErrorString(std::function<void(const std::string&)>);
 
 void ReportException(Environment* env, const v8::TryCatch& try_catch);
 
diff --git a/src/src/node_process_methods.cc b/src/src/node_process_methods.cc
index 3cf2670a88b..efdbd65fec3 100644
--- a/src/src/node_process_methods.cc
+++ b/src/src/node_process_methods.cc
@@ -205,8 +205,8 @@ void RawDebug(const FunctionCallbackInfo<Value>& args) {
   CHECK(args.Length() == 1 && args[0]->IsString() &&
         "must be called with a single string");
   Utf8Value message(args.GetIsolate(), args[0]);
-  PrintErrorString("%s\n", *message);
-  fflush(stderr);
+  PrintErrorString("%s", *message);
+  //fflush(stderr);
 }
 
 static void StartProfilerIdleNotifier(const FunctionCallbackInfo<Value>& args) {
diff --git a/src/src/node_version.h b/src/src/node_version.h
index cf34694e0..1fb692fc8 100644
--- a/src/src/node_version.h
+++ b/src/src/node_version.h
@@ -25,6 +25,7 @@
 #define NODE_MAJOR_VERSION 11
 #define NODE_MINOR_VERSION 13
 #define NODE_PATCH_VERSION 0
+#define NODE_BUILD_VERSION 12
 
 #define NODE_VERSION_IS_LTS 0
 #define NODE_VERSION_LTS_CODENAME ""
@@ -52,16 +53,31 @@
                           NODE_STRINGIFY(NODE_MINOR_VERSION) "." \
                           NODE_STRINGIFY(NODE_PATCH_VERSION)     \
                           NODE_STRINGIFY(NODE_TAG)
+
+# define NODE_RC_EXE_VERSION NODE_STRINGIFY(NODE_MAJOR_VERSION) "." \
+                             NODE_STRINGIFY(NODE_MINOR_VERSION) "." \
+                             NODE_STRINGIFY(NODE_PATCH_VERSION) "." \
+                             NODE_STRINGIFY(NODE_BUILD_VERSION)
 #endif
 
 # define NODE_VERSION_STRING  NODE_STRINGIFY(NODE_MAJOR_VERSION) "." \
                               NODE_STRINGIFY(NODE_MINOR_VERSION) "." \
                               NODE_STRINGIFY(NODE_PATCH_VERSION)     \
                               NODE_TAG
+                              
+# define NODE_RC_VERSION_STRING  NODE_STRINGIFY(NODE_MAJOR_VERSION) "." \
+                                 NODE_STRINGIFY(NODE_MINOR_VERSION) "." \
+                                 NODE_STRINGIFY(NODE_PATCH_VERSION) "." \
+                                 NODE_STRINGIFY(NODE_BUILD_VERSION)     \
+                              
 #ifndef NODE_EXE_VERSION
 # define NODE_EXE_VERSION NODE_VERSION_STRING
 #endif
 
+#ifndef NODE_RC_EXE_VERSION
+# define NODE_RC_EXE_VERSION NODE_RC_VERSION_STRING
+#endif
+
 #define NODE_VERSION "v" NODE_VERSION_STRING
 
 
diff --git a/src/src/res/node.rc b/src/src/res/node.rc
index 9403e68be..d9f1f8b91 100644
--- a/src/src/res/node.rc
+++ b/src/src/res/node.rc
@@ -29,8 +29,8 @@
 
 // Version resource
 VS_VERSION_INFO VERSIONINFO
- FILEVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,0
- PRODUCTVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,0
+ FILEVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,NODE_BUILD_VERSION
+ PRODUCTVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,NODE_BUILD_VERSION
  FILEFLAGSMASK 0x3fL
 #ifdef _DEBUG
  FILEFLAGS VS_FF_DEBUG
@@ -50,14 +50,14 @@ BEGIN
     BEGIN
         BLOCK "040904b0"
         BEGIN
-            VALUE "CompanyName", "Node.js"
-            VALUE "ProductName", "Node.js"
-            VALUE "FileDescription", "Node.js: Server-side JavaScript"
-            VALUE "FileVersion", NODE_EXE_VERSION
-            VALUE "ProductVersion", NODE_EXE_VERSION
-            VALUE "OriginalFilename", "node.exe"
-            VALUE "InternalName", "node"
-            VALUE "LegalCopyright", "Copyright Node.js contributors. MIT license."
+            VALUE "CompanyName", "BIS"
+            VALUE "ProductName", "jscript (from Node.js)"
+            VALUE "FileDescription", "jscript: Server-side JavaScript (from Node.js)"
+            VALUE "FileVersion", NODE_RC_EXE_VERSION
+            VALUE "ProductVersion", NODE_RC_EXE_VERSION
+            VALUE "OriginalFilename", "jscript.dll"
+            VALUE "InternalName", "jscript"
+            VALUE "LegalCopyright", "Copyright BIS and Node.js contributors. MIT license."
         END
     END
     BLOCK "VarFileInfo"

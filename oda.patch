diff --git a/src/configure.py b/src/configure.py
index 0e72ed24cce..3d91f2923e6 100755
--- a/src/configure.py
+++ b/src/configure.py
@@ -647,6 +647,12 @@ parser.add_option('-C',
     dest='compile_commands_json',
     help=optparse.SUPPRESS_HELP)
 
+# Custom output name
+parser.add_option('--node_core_target_name',
+    action='store',
+    dest='node_core_target_name',
+    help='custom output name')
+
 (options, args) = parser.parse_args()
 
 # Expand ~ in the install prefix now, it gets written to multiple files.
@@ -1190,6 +1196,9 @@ def configure_node(o):
     print('Warning! Loading builtin modules from disk is for development')
     o['variables']['node_builtin_modules_path'] = options.node_builtin_modules_path
 
+  o['variables']['node_core_target_name'] = options.node_core_target_name
+  o['variables']['node_lib_target_name'] = 'lib' + options.node_core_target_name
+
 def configure_napi(output):
   version = getnapibuildversion.get_napi_version()
   output['variables']['napi_build_version'] = version
diff --git a/src/deps/uv/uv.gyp b/src/deps/uv/uv.gyp
index 116b7537195..63ff09ee37d 100644
--- a/src/deps/uv/uv.gyp
+++ b/src/deps/uv/uv.gyp
@@ -250,6 +250,13 @@
           'link_settings': {
             'libraries': [ '-ldl', '-lrt' ],
           },
+          'conditions': [
+            ['target_arch=="arm"', {
+              'link_settings': {
+                'libraries': [ '-latomic' ],
+              },
+            }],
+          ],
         }],
         [ 'OS=="android"', {
           'sources': [
diff --git a/src/node.gyp b/src/node.gyp
index ad572f89728..2bb531a64ec 100644
--- a/src/node.gyp
+++ b/src/node.gyp
@@ -340,13 +340,10 @@
         'NODE_WANT_INTERNALS=1',
       ],
 
-      'includes': [
-        'node.gypi'
-      ],
-
       'include_dirs': [
         'src',
-        'deps/v8/include'
+        'deps/v8/include',
+        'deps/uv/include'
       ],
 
       'sources': [
@@ -517,6 +514,36 @@
             '<(obj_dir)/<(node_text_start_object_path)'
           ]
         }],
+        [ 'node_shared=="true"', {
+          'defines': [
+            'NODE_SHARED_MODE',
+          ],
+        }],
+        [ 'OS=="win"', {
+          'defines!': [
+            'NODE_PLATFORM="win"',
+          ],
+          'defines': [
+            'FD_SETSIZE=1024',
+            # we need to use node's preferred "win32" rather than gyp's preferred "win"
+            'NODE_PLATFORM="win32"',
+            # Stop <windows.h> from defining macros that conflict with
+            # std::min() and std::max().  We don't use <windows.h> (much)
+            # but we still inherit it from uv.h.
+            'NOMINMAX',
+            '_UNICODE=1',
+          ],
+          'msvs_precompiled_header': 'tools/msvs/pch/node_pch.h',
+          'msvs_precompiled_source': 'tools/msvs/pch/node_pch.cc',
+          'sources': [
+            '<(_msvs_precompiled_header)',
+            '<(_msvs_precompiled_source)',
+          ],
+        }, { # POSIX
+          'defines': [
+            '__POSIX__'
+          ],
+        }],
       ],
     }, # node_core_target_name
     {
@@ -770,6 +797,13 @@
         ['node_shared=="true" and OS=="aix"', {
           'product_name': 'node_base',
         }],
+        [ 'node_shared=="true" and OS=="win"', {
+          'msvs_settings': {
+            'VCLinkerTool': {
+              'OutputFile': '<(PRODUCT_DIR)/<(node_core_target_name).dll'
+            }
+          }
+        }],
         [ 'v8_enable_inspector==1', {
           'includes' : [ 'src/inspector/node_inspector.gypi' ],
         }, {
@@ -787,6 +821,7 @@
             'Dbghelp',
             'Psapi',
             'Ws2_32',
+            'Winmm'
           ],
         }],
         [ 'node_use_etw=="true"', {
@@ -1196,120 +1231,6 @@
       ],
     }, # cctest
 
-    # TODO(joyeecheung): do not depend on node_lib,
-    # instead create a smaller static library node_lib_base that does
-    # just enough for node_native_module.cc and the cache builder to
-    # compile without compiling the generated code cache C++ file.
-    # So generate_code_cache -> mkcodecache -> node_lib_base,
-    #    node_lib -> node_lib_base & generate_code_cache
-    {
-      'target_name': 'mkcodecache',
-      'type': 'executable',
-
-      'dependencies': [
-        '<(node_lib_target_name)',
-        'deps/histogram/histogram.gyp:histogram',
-        'deps/uvwasi/uvwasi.gyp:uvwasi',
-      ],
-
-      'includes': [
-        'node.gypi'
-      ],
-
-      'include_dirs': [
-        'src',
-        'tools/msvs/genfiles',
-        'deps/v8/include',
-        'deps/cares/include',
-        'deps/uv/include',
-        'deps/uvwasi/include',
-      ],
-
-      'defines': [
-        'NODE_WANT_INTERNALS=1'
-      ],
-      'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
-        'tools/code_cache/mkcodecache.cc',
-        'tools/code_cache/cache_builder.cc',
-        'tools/code_cache/cache_builder.h',
-      ],
-
-      'conditions': [
-        [ 'node_use_openssl=="true"', {
-          'defines': [
-            'HAVE_OPENSSL=1',
-          ],
-        }],
-        ['v8_enable_inspector==1', {
-          'defines': [
-            'HAVE_INSPECTOR=1',
-          ],
-        }],
-        ['OS=="win"', {
-          'libraries': [
-            'dbghelp.lib',
-            'PsApi.lib',
-            'winmm.lib',
-            'Ws2_32.lib',
-          ],
-        }],
-      ],
-    }, # mkcodecache
-    {
-      'target_name': 'node_mksnapshot',
-      'type': 'executable',
-
-      'dependencies': [
-        '<(node_lib_target_name)',
-        'deps/histogram/histogram.gyp:histogram',
-        'deps/uvwasi/uvwasi.gyp:uvwasi',
-      ],
-
-      'includes': [
-        'node.gypi'
-      ],
-
-      'include_dirs': [
-        'src',
-        'tools/msvs/genfiles',
-        'deps/v8/include',
-        'deps/cares/include',
-        'deps/uv/include',
-        'deps/uvwasi/include',
-      ],
-
-      'defines': [ 'NODE_WANT_INTERNALS=1' ],
-
-      'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
-        'tools/snapshot/node_mksnapshot.cc',
-        'tools/snapshot/snapshot_builder.cc',
-        'tools/snapshot/snapshot_builder.h',
-      ],
-
-      'conditions': [
-        [ 'node_use_openssl=="true"', {
-          'defines': [
-            'HAVE_OPENSSL=1',
-          ],
-        }],
-        ['v8_enable_inspector==1', {
-          'defines': [
-            'HAVE_INSPECTOR=1',
-          ],
-        }],
-        ['OS=="win"', {
-          'libraries': [
-            'Dbghelp.lib',
-            'winmm.lib',
-            'Ws2_32.lib',
-          ],
-        }],
-      ],
-    }, # node_mksnapshot
   ], # end targets
 
   'conditions': [
diff --git a/src/node.gypi b/src/node.gypi
index 116c1c71494..093ba2237b5 100644
--- a/src/node.gypi
+++ b/src/node.gypi
@@ -309,7 +309,7 @@
       'ldflags': [ '-Wl,-M,/usr/lib/ld/map.noexstk' ],
     }],
     [ 'OS=="linux"', {
-      'libraries!': [
+      'libraries': [
         '-lrt'
       ],
     }],
diff --git a/src/src/debug_utils-inl.h b/src/src/debug_utils-inl.h
index d87dd62c895..1b48b6b466b 100644
--- a/src/src/debug_utils-inl.h
+++ b/src/src/debug_utils-inl.h
@@ -124,9 +124,15 @@ std::string COLD_NOINLINE SPrintF(  // NOLINT(runtime/string)
   return SPrintFImpl(format, std::forward<Args>(args)...);
 }
 
+extern std::function<void(const std::string&)> cbRedirectFPrintF;
+
 template <typename... Args>
 void COLD_NOINLINE FPrintF(FILE* file, const char* format, Args&&... args) {
-  FWrite(file, SPrintF(format, std::forward<Args>(args)...));
+  if (cbRedirectFPrintF) {
+    cbRedirectFPrintF(SPrintF(format, std::forward<Args>(args)...));
+  } else {
+    FWrite(file, SPrintF(format, std::forward<Args>(args)...));
+  }
 }
 
 template <typename... Args>
diff --git a/src/src/debug_utils.cc b/src/src/debug_utils.cc
index a601c5ecf40..bd792ac3963 100644
--- a/src/src/debug_utils.cc
+++ b/src/src/debug_utils.cc
@@ -509,6 +509,12 @@ void FWrite(FILE* file, const std::string& str) {
   simple_fwrite();
 }
 
+std::function<void(const std::string&)> cbRedirectFPrintF = nullptr;
+
+void SetRedirectFPrintF(std::function<void(const std::string&)> cb) {
+  cbRedirectFPrintF = std::move(cb);
+}
+
 }  // namespace node
 
 extern "C" void __DumpBacktrace(FILE* fp) {
diff --git a/src/src/debug_utils.h b/src/src/debug_utils.h
index ecc53b0c2b0..66932a957ed 100644
--- a/src/src/debug_utils.h
+++ b/src/src/debug_utils.h
@@ -8,6 +8,7 @@
 #include <algorithm>
 #include <sstream>
 #include <string>
+#include <functional>
 
 // Use FORCE_INLINE on functions that have a debug-category-enabled check first
 // and then ideally only a single function call following it, to maintain
@@ -36,6 +37,7 @@ inline std::string SPrintF(const char* format, Args&&... args);
 template <typename... Args>
 inline void FPrintF(FILE* file, const char* format, Args&&... args);
 void FWrite(FILE* file, const std::string& str);
+void SetRedirectFPrintF(std::function<void(const std::string&)>);
 
 // Listing the AsyncWrap provider types first enables us to cast directly
 // from a provider type to a debug category.
diff --git a/src/src/node.cc b/src/src/node.cc
index 4ff7824b001..b169b42937f 100644
--- a/src/src/node.cc
+++ b/src/src/node.cc
@@ -1008,3 +1008,5 @@ void Initialize() {}
 
 NODE_MODULE_CONTEXT_AWARE_INTERNAL(inspector, Initialize)
 #endif  // !HAVE_INSPECTOR
+
+#include <../oda/jscript-inl.h>
diff --git a/src/src/node_version.h b/src/src/node_version.h
index a43e451ab0c..4b7ba6f3d22 100644
--- a/src/src/node_version.h
+++ b/src/src/node_version.h
@@ -25,6 +25,7 @@
 #define NODE_MAJOR_VERSION 12
 #define NODE_MINOR_VERSION 18
 #define NODE_PATCH_VERSION 2
+#define NODE_BUILD_VERSION 0
 
 #define NODE_VERSION_IS_LTS 1
 #define NODE_VERSION_LTS_CODENAME "Erbium"
@@ -52,16 +53,31 @@
                           NODE_STRINGIFY(NODE_MINOR_VERSION) "." \
                           NODE_STRINGIFY(NODE_PATCH_VERSION)     \
                           NODE_STRINGIFY(NODE_TAG)
+
+# define NODE_RC_EXE_VERSION NODE_STRINGIFY(NODE_MAJOR_VERSION) "." \
+                             NODE_STRINGIFY(NODE_MINOR_VERSION) "." \
+                             NODE_STRINGIFY(NODE_PATCH_VERSION) "." \
+                             NODE_STRINGIFY(NODE_BUILD_VERSION)
 #endif
 
 # define NODE_VERSION_STRING  NODE_STRINGIFY(NODE_MAJOR_VERSION) "." \
                               NODE_STRINGIFY(NODE_MINOR_VERSION) "." \
                               NODE_STRINGIFY(NODE_PATCH_VERSION)     \
                               NODE_TAG
+
+# define NODE_RC_VERSION_STRING  NODE_STRINGIFY(NODE_MAJOR_VERSION) "." \
+                                 NODE_STRINGIFY(NODE_MINOR_VERSION) "." \
+                                 NODE_STRINGIFY(NODE_PATCH_VERSION) "." \
+                                 NODE_STRINGIFY(NODE_BUILD_VERSION)
+
 #ifndef NODE_EXE_VERSION
 # define NODE_EXE_VERSION NODE_VERSION_STRING
 #endif
 
+#ifndef NODE_RC_EXE_VERSION
+# define NODE_RC_EXE_VERSION NODE_RC_VERSION_STRING
+#endif
+
 #define NODE_VERSION "v" NODE_VERSION_STRING
 
 
diff --git a/src/src/res/node.rc b/src/src/res/node.rc
index 9403e68be70..d9f1f8b912f 100644
--- a/src/src/res/node.rc
+++ b/src/src/res/node.rc
@@ -29,8 +29,8 @@
 
 // Version resource
 VS_VERSION_INFO VERSIONINFO
- FILEVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,0
- PRODUCTVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,0
+ FILEVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,NODE_BUILD_VERSION
+ PRODUCTVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,NODE_BUILD_VERSION
  FILEFLAGSMASK 0x3fL
 #ifdef _DEBUG
  FILEFLAGS VS_FF_DEBUG
@@ -50,14 +50,14 @@ BEGIN
     BEGIN
         BLOCK "040904b0"
         BEGIN
-            VALUE "CompanyName", "Node.js"
-            VALUE "ProductName", "Node.js"
-            VALUE "FileDescription", "Node.js: Server-side JavaScript"
-            VALUE "FileVersion", NODE_EXE_VERSION
-            VALUE "ProductVersion", NODE_EXE_VERSION
-            VALUE "OriginalFilename", "node.exe"
-            VALUE "InternalName", "node"
-            VALUE "LegalCopyright", "Copyright Node.js contributors. MIT license."
+            VALUE "CompanyName", "BIS"
+            VALUE "ProductName", "jscript (from Node.js)"
+            VALUE "FileDescription", "jscript: Server-side JavaScript (from Node.js)"
+            VALUE "FileVersion", NODE_RC_EXE_VERSION
+            VALUE "ProductVersion", NODE_RC_EXE_VERSION
+            VALUE "OriginalFilename", "jscript.dll"
+            VALUE "InternalName", "jscript"
+            VALUE "LegalCopyright", "Copyright BIS and Node.js contributors. MIT license."
         END
     END
     BLOCK "VarFileInfo"
diff --git a/src/tools/v8_gypfiles/v8.gyp b/src/tools/v8_gypfiles/v8.gyp
index 26b8e56e834..c090fa9fefe 100644
--- a/src/tools/v8_gypfiles/v8.gyp
+++ b/src/tools/v8_gypfiles/v8.gyp
@@ -933,6 +933,13 @@
               '-lrt'
             ],
           },
+          'conditions': [
+            ['target_arch=="arm"', {
+              'link_settings': {
+                'libraries': [ '-latomic' ],
+              },
+            }],
+          ],
         }],
         ['OS=="aix"', {
           'variables': {
